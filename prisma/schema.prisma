generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id            Int            @id @default(autoincrement())
  firtName      String         @db.VarChar(20)
  lastName      String         @db.VarChar(20)
  phoneNumber   String         @unique @db.VarChar(255)
  email         String         @unique @db.VarChar(255)
  password      String         @db.VarChar(255)
  address       String?
  gender        Gender?
  role          Role?          @default(USER)
  orders        Order[]
  comments      Comment[]
  notifications Notification[]
}

enum Gender {
  MALE
  FEMALE
}

enum Role {
  USER // default value for enums
  ADMIN
}

model Bakery {
  id       Int       @id @default(autoincrement())
  name     String
  address  String
  products Product[]
  comments Comment[]
}

model Product {
  id          Int              @id @default(autoincrement())
  name        String           @db.VarChar(255)
  description String           @db.VarChar(255)
  price       Float
  quantity    Int
  image       String
  category    String
  bakery_id   Int
  bakery      Bakery           @relation(fields: [bakery_id], references: [id])
  comments    Comment[]
  orderItems  OrderItem[]
  inventories Inventory[]
  history     ProductHistory[]
}

model Inventory {
  id         Int      @id @default(autoincrement())
  quantity   Int
  product_id Int
  product    Product  @relation(fields: [product_id], references: [id])
  createdAt  DateTime @default(now())
}

model ProductHistory {
  id         Int      @id @default(autoincrement())
  price      Float
  product_id Int
  product    Product  @relation(fields: [product_id], references: [id])
  updatedAt  DateTime @default(now())
}

model Comment {
  id         Int      @id @default(autoincrement())
  text       String
  user_id    Int?
  user       User?    @relation(fields: [user_id], references: [id])
  bakery_id  Int?
  bakery     Bakery?  @relation(fields: [bakery_id], references: [id])
  product_id Int?
  product    Product? @relation(fields: [product_id], references: [id])
}

model Order {
  id           Int            @id @default(autoincrement())
  guestEmail   String?
  orderNumber  String         @unique
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  totalAmount  Float
  user_id      Int?
  user         User?          @relation(fields: [user_id], references: [id])
  orderItems   OrderItem[]
  payments     Payment[]
  history      OrderHistory[]
  Notification Notification[]
}

model OrderItem {
  id         Int     @id @default(autoincrement())
  quantity   Int
  price      Float
  order_id   Int
  order      Order   @relation(fields: [order_id], references: [id])
  product_id Int
  product    Product @relation(fields: [product_id], references: [id])
}

model OrderHistory {
  id        Int      @id @default(autoincrement())
  status    String
  order_id  Int
  order     Order    @relation(fields: [order_id], references: [id])
  updatedAt DateTime @default(now())
}

model Payment {
  id        Int      @id @default(autoincrement())
  amount    Float
  method    String
  status    String
  order_id  Int
  order     Order    @relation(fields: [order_id], references: [id])
  createdAt DateTime @default(now())
}

model Notification {
  id        Int      @id @default(autoincrement())
  message   String
  user_id   Int?
  user      User?    @relation(fields: [user_id], references: [id])
  order_id  Int
  order     Order    @relation(fields: [order_id], references: [id])
  createdAt DateTime @default(now())
}
